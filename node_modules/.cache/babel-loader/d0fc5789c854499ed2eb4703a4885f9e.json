{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { DISHES } from '../shared/dishes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n}; //thunk allwos us to return function isntead of action (for fetchDishes)\n\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n  return fetch(baseUrl + \"leaders\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => dispatch => {\n  const newFeedback = {\n    firstname: firstname,\n    lastname: lastname,\n    telnum: telnum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n  return fetch(baseUrl + \"feedback\", {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => alert(\"Thank you for your feedback!\" + JSON.stringify(response))).catch(error => {\n    console.log('post feedbacks', error.message);\n    alert('Your feedback could not be posted\\nError: ' + error.message);\n  });\n};","map":{"version":3,"sources":["C:/Users/Acer/Documents/LIFELONG LEARNING/Coursera/Fullstack web mobile dev/React/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","DISHES","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","postFeedback","firstname","lastname","telnum","email","agree","contactType","newFeedback"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { DISHES } from '../shared/dishes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    };\r\n    newComment.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                throw error;\r\n            })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addComment(response)))\r\n        .catch(error => { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: ' + error.message); });\r\n};\r\n\r\n//thunk allwos us to return function isntead of action (for fetchDishes)\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(dishes => dispatch(addDishes(dishes)))\r\n        .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {\r\n    return fetch(baseUrl + 'comments')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(comments => dispatch(addComments(comments)))\r\n        .catch(error => dispatch(commentsFailed(error.message)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n\r\n    dispatch(promosLoading());\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(promos => dispatch(addPromos(promos)))\r\n        .catch(error => dispatch(promosFailed(error.message)));\r\n};\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\nexport const fetchLeaders = () => dispatch => {\r\n    dispatch(leadersLoading());\r\n\r\n    return fetch(baseUrl + \"leaders\")\r\n        .then(\r\n            response => {\r\n                if (response.ok) {\r\n                    return response;\r\n                } else {\r\n                    var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\r\n                    error.response = response;\r\n                    throw error;\r\n                }\r\n            },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(leaders => dispatch(addLeaders(leaders)))\r\n        .catch(error => dispatch(leadersFailed(error.message)));\r\n};\r\n\r\nexport const leadersLoading = () => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = errmess => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addLeaders = leaders => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload: leaders\r\n});\r\n\r\nexport const postFeedback = (\r\n\r\n    firstname,\r\n    lastname,\r\n    telnum,\r\n    email,\r\n    agree,\r\n    contactType,\r\n    message) => (dispatch) => {\r\n\r\n        const newFeedback = {\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            telnum: telnum,\r\n            email: email,\r\n            agree: agree,\r\n            contactType: contactType,\r\n            message: message\r\n        };\r\n\r\n        return fetch(baseUrl + \"feedback\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify(newFeedback),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            credentials: \"same-origin\"\r\n        })\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response;\r\n                } else {\r\n                    var error = new Error('Error ' + response.status + \": \" + response.statusText);\r\n                    error.response = response;\r\n                    throw error;\r\n                }\r\n            },\r\n                error => {\r\n                    throw error;\r\n                })\r\n            .then(response => response.json())\r\n            .then(response =>\r\n                alert(\"Thank you for your feedback!\" + JSON.stringify(response))\r\n            )\r\n            .catch(error => {\r\n                console.log('post feedbacks', error.message);\r\n                alert('Your feedback could not be posted\\nError: ' + error.message);\r\n            });\r\n    };"]},"metadata":{},"sourceType":"module"}